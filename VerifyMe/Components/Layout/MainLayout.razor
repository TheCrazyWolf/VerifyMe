@using Blazored.LocalStorage
@inherits LayoutComponentBase

@inject IConfiguration Config;
@inject ILocalStorageService Storage;
@inject NavigationManager Navigation;

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout Style="background-color: #e3eaf2;">
    <MudAppBar Style="background-color: #e3eaf2;" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudText Typo="Typo.subtitle1" Color="Color.Dark" Class="ml-3">VerifyMe</MudText>
        <MudSpacer/>
    </MudAppBar>
    <MudDrawer Style="background-color: #e3eaf2;" @bind-Open="_drawerOpen"
               Width="300px"
               ClipMode="DrawerClipMode.Always" Elevation="0">
        @if (isAuthorized)
        {
            <NavMenu/>
        }
    </MudDrawer>
    <MudMainContent>
        <MudPaper Style="overflow-y: scroll; padding: 15px; margin: 10px 20px 10px 20px; height: 88vh;">
            @if (isAuthorized)
            {
                @Body
            }
        </MudPaper>
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;
    private bool isAuthorized = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    protected override Task OnInitializedAsync()
    {
        RedirectIfUnAuth();
        return Task.CompletedTask;
    }

    protected async void RedirectIfUnAuth()
    {
        if (Config.GetValue<string>("AdminPasswordSecurity") != await Storage.GetItemAsync<string>("AdminPasswordSecurity"))
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        isAuthorized = true;
        await InvokeAsync(StateHasChanged);
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

}